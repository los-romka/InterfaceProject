/**
 * Table representation by los-romka
 */
(function( $ ) {
;function Button( name, click ) {
    this.btn = document.createElement( 'button' );
    this.btn.textContent = name;
    this.btn.onclick = click;

    return this.btn;
}INTERFACE_SPECIFIER = {
    "COLLECTION": "#COLLECTION#",
    "STRING" : "#STRING#",
    "INTEGER" : "#INTEGER#",
    "REAL" : "#REAL#",
    "BOOLEAN" : "#BOOLEAN#",
    "DATETIME" : "#DATETIME#",
    "BLOB" : "#BLOB#",
    "ALT" : "#ALT#",
    "COMPLEX" : "#COMPLEX#",
    "TERMINAL_VALUE" : "#TERMINAL_VALUE#",
    "UNDEFINED" : "",
    "REGULAR_EXPR" : /#[\w]*#/g
};

COLLECTION_ORIENTATION = {
    "HORIZONTAL": "HORIZONTAL",
    "VERTICAL": "VERTICAL"
};

COLLECTION_TYPE = {
    "LIST" : "LIST",
    "SET" : "SET"
};

SPECIFIER = {
    "ONE" : "~one",
    "ONEMM" : "~onemm",
    "COPY" : "~copy",
    "COPYMM" : "~copymm",
    "SET" : "~set",
    "SETMM" : "~setmm",
    "LIST" : "~list",
    "LISTMM" : "~listmm",
    "PROXY" : "~proxy",
    "ALT" : "~ALT",
    "REGULAR_EXPR" : /~[\w]*\b/g
};

TERMINAL = {
    "SORT" : {
        "STR" : "[str]",
        "INT" : "[int]",
        "REAL" : "[real]",
        "BOOL" : "[bool]",
        "DATE" : "[date]",
        "BLOB" : "[blob]",
        "REGULAR_EXPR" : /\[(str|int|real|bool|date|blob)\]/g
    },
    "VALUE" : {
        "STR" : /\["[\w\W]*"\]/g,
        "INT" : /\[-?[\d]+\]/g,
        "REAL" : /\[-?[\d]+(\.[\d]+)?\]/g,
        "BOOL" : /\[(true|false)\]/g,
        "DATE" : /\[[\d]{2}\.[\d]{2}\.[\d]{4}-[\d]{2}:[\d]{2}:[\d]{2}.[\d]{3}\]/g,
        "BLOB" : /\['[\w\W]*'\]/g,
        "REGULAR_EXPR" : /[^\[]([\S\s]*)(?=\])/g
    },
    "REGULAR_EXPR" : /\[[\w\W]*\]/g
};

TO = {
    "STR" : function( value ) { return "[\"" + value + "\"]";},
    "INT" : function( value ) { return "[" + value + "]";},
    "REAL" : function( value ) { return "[" + value + "]";},
    "BOOL" : function( value ) { return "[" + value + "]";},
    "DATE" : function( value ) {
        var year = value.substring(0, 4),
            month = value.substring(5, 7),
            day = value.substring(8, 10),
            hour = value.substring(11, 13),
            min = value.substring(14, 16),
            sec = "00",
            milisec = "000";

        return "[" + day + "." + month + "." + year + "-" + hour + ":" + min + ":" + sec + "." + milisec + "]";
    },
    "BLOB" : function( value ) { return "[\'" + value + "\']";}
};

FROM = {
    "STR" : function( value ) { return value.substring( 2, value.length - 2 ); },
    "INT" : function( value ) { return value.substring( 1, value.length - 1 ); },
    "REAL" : function( value ) { return value.substring( 1, value.length - 1 ); },
    "BOOL" : function( value ) { return value.substring( 1, value.length - 1 ); },
    "DATE" : function( value ) {
        var year = value.substring(7, 11),
            month = value.substring(4, 6),
            day = value.substring(1, 3),
            hour = value.substring(12, 14),
            min = value.substring(15, 17);

        return year + "-" + month + "-" + day + "T" + hour + ":" + min;
    },
    "BLOB" : function( value ) { return value.substring( 2, value.length - 2 ); },
};;function in_array( value, array ) {
    for ( var i = 0; i < array.length; i++ ) {
        if ( array[i] == value ) return true;
    }

    return false;
}

function intersect(a, b) {
    a.sort(); b.sort();
    var ai = 0, bi = 0;
    var result = [];

    while( ai < a.length && bi < b.length ) {
        if (a[ai] < b[bi] ) {
            ai++;
        } else if (a[ai] > b[bi] ) {
            bi++;
        } else {
            result.push(a[ai]);
            ai++;
            bi++;
        }
    }

    return result;
}

function sortArrayByMeta(leafs, leafs_meta) {
    return leafs.sort(function(a, b) {
        var aIndex = leafs_meta.findIndex(function(element) {
            return element.name === a.name;
        });

        var bIndex = leafs_meta.findIndex(function(element) {
            return element.name === b.name;
        });

        return aIndex - bIndex;
    });
}

function clone( obj ) {
    if ( obj == null || typeof( obj ) != 'object' )
        return obj;
    var temp = new obj.constructor();
    for ( var key in obj ) {
        if ( obj.hasOwnProperty( key ) ) {
            temp[key] = clone( obj[key] );
        }
    }

    return temp;
};function Vertex( name, specifiers, interface_specifier, sort ) {
    this.name = name;
    this.specifiers = specifiers;
    this.interface_specifier = interface_specifier;
    this.interface_params = {};
    this.sort = sort;
    this.children = [];
}

Vertex.prototype.transformToCollection = function(orientation) {
    this.interface_params = {
        ORIENTATION: orientation
    };

    this.interface_specifier = INTERFACE_SPECIFIER.COLLECTION;
};

Vertex.prototype.simplifyCollection = function() {
    if ( this.specifiers ) {
        for ( var i = this.specifiers.length - 1; i >= 0 ; i-- ) {
            if ( in_array(this.specifiers[i], [SPECIFIER.SET, SPECIFIER.SETMM, SPECIFIER.LIST, SPECIFIER.LISTMM, SPECIFIER.ONEMM]) ) {
                this.specifiers.splice( i, 1 );
            }
        }
    }

    this.interface_specifier = INTERFACE_SPECIFIER.UNDEFINED;

    return this;
};

Vertex.prototype.updateSpecifier = function() {
    if ( intersect( this.specifiers, [
            SPECIFIER.SET, SPECIFIER.SETMM,
            SPECIFIER.LIST, SPECIFIER.LISTMM,
            SPECIFIER.COPY, SPECIFIER.COPYMM,
            SPECIFIER.ONE, SPECIFIER.ONEMM ] ).length === 0 ) {

        this.specifiers.push( ( this.sort ? SPECIFIER.ONE : SPECIFIER.COPY) );
    }
    return this;
};

Vertex.prototype.updateInterfaceSpecifier = function() {
    if (this.interface_specifier == INTERFACE_SPECIFIER.UNDEFINED) {
        if ( intersect([SPECIFIER.SET,SPECIFIER.SETMM,
                SPECIFIER.LIST,SPECIFIER.LISTMM,
                SPECIFIER.ONEMM], this.specifiers).length > 0 ) {
            this.interface_specifier = INTERFACE_SPECIFIER.COLLECTION;
        } else if ( this.sort ) {
            switch ( this.sort ) {
                case TERMINAL.SORT.STR : this.interface_specifier = INTERFACE_SPECIFIER.STRING; break;
                case TERMINAL.SORT.INT : this.interface_specifier = INTERFACE_SPECIFIER.INTEGER; break;
                case TERMINAL.SORT.REAL : this.interface_specifier = INTERFACE_SPECIFIER.REAL; break;
                case TERMINAL.SORT.BOOL : this.interface_specifier = INTERFACE_SPECIFIER.BOOLEAN; break;
                case TERMINAL.SORT.DATE : this.interface_specifier = INTERFACE_SPECIFIER.DATETIME; break;
                case TERMINAL.SORT.BLOB : this.interface_specifier = INTERFACE_SPECIFIER.BLOB; break;
                default : {
                    if ( this.sort.match( TERMINAL.VALUE.STR ) || this.sort.match( TERMINAL.VALUE.INT )
                        || this.sort.match( TERMINAL.VALUE.REAL ) || this.sort.match( TERMINAL.VALUE.BOOL )
                        || this.sort.match( TERMINAL.VALUE.DATE ) || this.sort.match( TERMINAL.VALUE.BLOB ) ) {
                        this.interface_specifier = INTERFACE_SPECIFIER.TERMINAL_VALUE;
                    } else {
                        this.interface_specifier = INTERFACE_SPECIFIER.UNDEFINED;
                    }
                    break;
                }
            }
        } else if ( in_array( SPECIFIER.ALT, this.specifiers ) )  {
            this.interface_specifier = INTERFACE_SPECIFIER.ALT;
        } else {
            this.interface_specifier = INTERFACE_SPECIFIER.COMPLEX;
        }
    }

    return this;
};

;function AbstractVertex( $block, meta ) {
    meta.updateInterfaceSpecifier();

    var _class;

    switch ( meta.interface_specifier ) {
        case INTERFACE_SPECIFIER.COLLECTION :     _class = CollectionVertex; break;

        case INTERFACE_SPECIFIER.ALT :            _class = AltVertex; break;
        case INTERFACE_SPECIFIER.COMPLEX :        _class = ComplexVertex; break;
        case INTERFACE_SPECIFIER.BOOLEAN :        _class = BooleanVertex; break;
        case INTERFACE_SPECIFIER.DATETIME :       _class = DatetimeVertex; break;
        case INTERFACE_SPECIFIER.STRING :         _class = StringVertex; break;
        case INTERFACE_SPECIFIER.INTEGER :        _class = IntegerVertex; break;
        case INTERFACE_SPECIFIER.REAL :           _class = RealVertex; break;
        case INTERFACE_SPECIFIER.BLOB :           _class = BlobVertex; break;
        case INTERFACE_SPECIFIER.TERMINAL_VALUE : _class = TerminalVertex; break;
        default :                                 _class = function() {return null;}
    }

    return _class( $block, meta );
};function IrParser() {

    return {
        toJson: function IrToJson( text ) {
            var current_pos = 0,
                tree = new Vertex( "tree", [SPECIFIER.COPY,SPECIFIER.PROXY], INTERFACE_SPECIFIER.COMPLEX, null ),
                stack = [tree],
                current_vertex;

            while ( current_pos < text.length && stack.length > 0 ) {
                var full_name = get_full_name( text, current_pos );

                current_pos = current_pos + full_name.length + 1;

                current_vertex = stack.pop();

                if ( !full_name.trim().length ) continue;

                var _specifiers = full_name.match( SPECIFIER.REGULAR_EXPR ),
                    _interface_specifier = full_name.match( INTERFACE_SPECIFIER.REGULAR_EXPR ),
                    _sort = full_name.match( TERMINAL.REGULAR_EXPR ),

                    specifiers = ( ( _specifiers ) ? _specifiers : [] ),
                    interface_specifier = ( ( _interface_specifier ) ? _interface_specifier[0] : INTERFACE_SPECIFIER.UNDEFINED ),
                    sort = ( ( _sort ) ? _sort[0] : null );

                var name = full_name.replace( SPECIFIER.REGULAR_EXPR, "" )
                    .replace( INTERFACE_SPECIFIER.REGULAR_EXPR, "" )
                    .replace( TERMINAL.REGULAR_EXPR, "" )
                    .trim();

                var toPushVertex = new Vertex( name, specifiers, interface_specifier, sort );
                toPushVertex.updateSpecifier().updateInterfaceSpecifier();

                current_vertex.children.push( toPushVertex );
                stack.push( current_vertex );

                if ( text[current_pos-1] == "{" ) {
                    stack.push( current_vertex.children[current_vertex.children.length-1] );
                }
            }

            return tree.children[0];
        },

        toIr: function ( json ) {
            return putVertex( json, 0 );
        }
    };

    function putVertex( vertex, level ) {
        var text = "";

        if ( vertex.length >= 0 ) {
            for ( var i = 0; i < vertex.length; i++ ) {
                text = text + putVertex( vertex[i], level );
            }
            return text;
        }

        for ( var i = 0; i < level*2; i++ ) {
            text = text + " ";
        }

        text = text + vertex.name;

        if ( !vertex.sort ) {
            text = text + " {\n";
            for ( var i = 0; i < vertex.children.length; i++ ) {
                text = text + putVertex( vertex.children[i], level + 1 );
            }
            for ( var i = 0; i < level*2; i++ ) {
                text = text + " ";
            }
            text = text + "}\n";
        } else {
            text = text + vertex.sort + "\n";;
        }

        return text;
    }

    function get_full_name( text, current_pos ) {
        var line, lines = [];

        /* Костыль для ссылок */
        line = text.substring( current_pos ).match( /^[\s\S]*?;/ );
        if ( line ) {lines.push( line[0] );}

        line = text.substring( current_pos ).match( /^[\s\S]*?[\s\S](?={)/ );
        if ( line ) lines.push( line[0] );

        line = text.substring( current_pos ).match( /^[\s\S]*?]/ );
        if ( line ) lines.push( line[0] );

        line = text.substring( current_pos ).match( /^[\s]*(?=})/ );
        if ( line ) lines.push( line[0] );

        line = "";

        for ( var i = 0; i < lines.length; i++ ) {
            if ( !line.length ) {
                line = lines[i];
            }
            if ( lines[i].length < line.length ){
                line = lines[i];
            }
        }

        return line;
    }
};function Table( root ) {

    if ( root.interface_specifier != INTERFACE_SPECIFIER.TABLE ) return;
    
    var root = clone( root );
    
    this.name = root.name;
    this.title = ( !in_array( SPECIFIER.PROXY, root.specifiers ) ? root.name : null );    
    this.element_metainf;
    this.type;
    
    for ( var i = 0; i < root.children.length; i++ ) {
        if ( in_array( root.children[i].interface_specifier, [INTERFACE_SPECIFIER.ROW, INTERFACE_SPECIFIER.COLUMN] ) ) {
            this.element_metainf = root.children[i];
            this.type = root.children[i].interface_specifier;
            break;
        }
    }
    
    this.traversal = get_first_traversal( this.element_metainf );
    this.leafs = get_leafs( this.traversal );
    
    this.width = get_width( this.element_metainf );
    this.height = get_height( this.element_metainf );
    
    this.element_metainf.level = 0;
    this.element_metainf.width = this.width;
    this.element_metainf.height = this.height;
    
    this.min_elements;
    this.max_elements;
    
    if ( in_array( SPECIFIER.ONE, this.element_metainf.specifiers ) || in_array( SPECIFIER.COPY, this.element_metainf.specifiers ) ) {
        this.min_elements = 1;
        this.max_elements = 1;
    } else if ( in_array( SPECIFIER.ONEMM, this.element_metainf.specifiers ) || in_array( SPECIFIER.COPYMM, this.element_metainf.specifiers ) ) {
        this.min_elements = 0;
        this.max_elements = 1;
    } else if ( in_array( SPECIFIER.SET, this.element_metainf.specifiers ) ) {
        this.min_elements = 1;
        this.max_elements = 100000;
    } else if ( in_array( SPECIFIER.SETMM, this.element_metainf.specifiers ) ) {
        this.min_elements = 0;
        this.max_elements = 100000;
    }
        
    this.elements_count = 0;
    
    this.matrix = get_matrix( this.type, this.width, this.height, this.traversal );      
    
    this.table_block;    
    this.add_btn;
    this.delete_btn;
        
    this.getEditInterface = function(){
        this.table_block = get_table_block( this.element_metainf, this.title, this.matrix );
        
        this.add_btn = get_add_button( this );
        this.delete_btn = get_delete_button( this );        
        
        var control_block = document.createElement( 'div' );
        $(control_block).addClass("control_block");
        control_block.appendChild( this.add_btn );    
        control_block.appendChild( this.delete_btn );    
        this.table_block.appendChild( control_block );
            
        while ( this.elements_count < this.min_elements ) {
            this.add_btn.click();
        }
            
        update_buttons( this );
        
        return this.table_block;
    }
    
    this.getInformation = function( block ) { 
        var list = block.querySelector( 'table' ),
              set = new Vertex( this.name, [], "", null ),             
              size = get_size_from_blocks( this.type, this.height, list );
        
        for ( var i = 0; i < size ; i++ ) {
            var leafs_vals = [];
            
            if ( this.type == INTERFACE_SPECIFIER.ROW ) {
                for ( var j = 0; j < list.children[i + this.height + 1].children.length; j++ ) {
                    leafs_vals.push( list.children[i + this.height + 1].children[j].querySelector( 'div' ) );
                }
            } else {
                for ( var j = this.width - 1; j >= 0 ; j-- ) {
                    leafs_vals.push( list.children[j].children[list.children[j].children.length - size + i].querySelector( 'div' ) );
                }
            }
            
            var info = merge_leafs_val_with_meta( leafs_vals, this.element_metainf );
            
            set.children.push( info );
        } 

        return set;
    }
    
    this.putInformation = function( info, block ) {
        var children = block.children, 
              title_shift = ( block.children[0].nodeName == "H1" ? 1 : 0),
              elementsOfSet = [],
              k = 0,
              list = block.querySelector( 'table' ),
              size = get_size_from_blocks( this.type, this.height, list ),
              leafs_meta = get_leafs( get_first_traversal( clone( this.element_metainf ) ) )
              
              
        while ( info.children[k] && this.element_metainf.name == info.children[k].name ) {
            elementsOfSet.push( info.children[k] );
            k++;
        }
        
        while ( size < elementsOfSet.length ) {
            block.lastChild.children[0].click();
            size++;
        }
        
        for ( var i = 0; i < size ; i++ ) {
            var leafs_blocks = [];
            
            if ( this.type == INTERFACE_SPECIFIER.ROW ) {
                for ( var j = 0; j < list.children[i + this.height + 1].children.length; j++ ) {
                    leafs_blocks.push( list.children[i + this.height + 1].children[j].querySelector( 'div' ) );
                }
            } else {
                for ( var j = this.width - 1; j >= 0 ; j-- ) {
                    leafs_blocks.push( list.children[j].children[list.children[j].children.length - size + i].querySelector( 'div' ) );
                }
            }
            
            put_info_leafs_vals( elementsOfSet[i], leafs_blocks, this.element_metainf );
        }  
    }
    
    function get_size_from_blocks( type, height, table ) {
        var size = 0;
        
        if ( type == INTERFACE_SPECIFIER.ROW ) {
            size = table.children.length - height - 1;
        } else {            
            for ( var j = 0; j < table.children[0].children.length; j++ ) {
                if ( table.children[0].children[j].nodeName != "TH" ) {
                    size++;
                }
            }
        }    
        
        return size;
    }
    
    function put_info_leafs_vals( info, leafs_blocks, element_metainf ) {
        var traversal_meta = [],
              queue_meta = [],
              traversal_info = [],
              queue_info = [];
        
        queue_meta.push( clone(element_metainf) );
        queue_info.push( clone(info) );
        
        while ( queue_meta.length ) {
            
            var current_meta = queue_meta.pop(),
                  current_info = queue_info.pop();

            traversal_meta.push( current_meta );            

            if ( isHeaderVertex( current_meta ) ) {       
                var k = 0;
                for ( var i = 0; i < current_meta.children.length; i++ ) {
                    queue_meta.push( current_meta.children[i] );
                    
                    if ( in_array( current_meta.children[i].interface_specifier, [interface_specifier.set] ) ) {
                        var elementsofset = [];
                        while ( current_info.children[i + k] && current_meta.children[i].name == current_info.children[i + k].name ) {
                            elementsofset.push( current_info.children[i + k] );
                            k++;
                        }
                        k--;
                        queue_info.push( elementsofset );
                    } else {
                        queue_info.push( current_info.children[i+k] );
                    }               
                }
            } else {
                traversal_info.push( current_info );
            }
        }
        
        for ( var i = traversal_meta.length - 1; i >= 0; i-- ) {
            if ( isHeaderVertex( traversal_meta[i] ) ) {
                traversal_meta.splice( i, 1 );
            }  
        }
        
        if ( traversal_meta.length == 0 ) {
            element_metainf.resetSpecifiers();
            element_metainf.updateSpecifier();
            element_metainf.updateInterfaceSpecifier();
            
            traversal_meta.push( element_metainf );
            traversal_info.push( info ); 
        }
        
        for ( var i = 0; i < traversal_meta.length; i++ ) {
            traversal_meta[i].putInformation( traversal_info[i], leafs_blocks.pop() );
        }
    }
    
    function merge_leafs_val_with_meta( leafs_vals, element_metainf ) {
        var vertex = clone( element_metainf ),
              traversal = get_first_traversal( vertex );
        
        if ( traversal.length == 1 ) {
            var value = leafs_vals.shift(),
                  current = traversal.pop();
                  
            current.resetSpecifiers();
            current.updateSpecifier();
            current.updateInterfaceSpecifier();
            
            return current.getInformation( value );
        }
        
        while ( traversal.length ) {
            
            var parent = traversal.pop();
            if ( !isHeaderVertex( parent ) ) continue;
            
            for ( var i = 0; i < parent.children.length; i++ ) {
                var current = parent.children[i];
                if ( !isHeaderVertex( current ) ) {
                    var value = leafs_vals.shift(),
                          info = current.getInformation( value );   
                    
                    if ( info.length >= 0) {
                        parent.children[i] = info;
                    } else {
                        current.sort = info.sort;
                        current.children = info.children;
                    }
                }
            }
        }
        
        return vertex;
    }
    
    function get_table_block( element_metainf, title, matrix ) {
        var table_block = document.createElement( 'div' );
        $(table_block).addClass("table_block");
        
        if ( title ) {
            var ttl = document.createElement( 'h1' );
            ttl.textContent = title;
            table_block.appendChild( ttl );
        }
        
        if ( !element_metainf ) return table_block;
        
        table_block.appendChild( form_table( matrix ) ); 
        
        return table_block;
        
    }
    
    function get_add_button( table_class ) { 
        var btn = new Button( "+", function() {        
            table_class.elements_count++;
            
            if ( table_class.element_metainf.sort ) {
                var td = document.createElement( 'td' ); 
                
                if ( !in_array( SPECIFIER.PROXY, table_class.element_metainf.specifiers ) ) {
                    table_class.element_metainf.specifiers.push( SPECIFIER.PROXY );
                }   
                
                table_class.element_metainf.resetSpecifiers();
                table_class.element_metainf.updateSpecifier();
                table_class.element_metainf.updateInterfaceSpecifier();
                
                td.appendChild( table_class.element_metainf.getEditInterface() );  
                
                if ( table_class.type == INTERFACE_SPECIFIER.ROW ) {
                    var tr = document.createElement( 'tr' );                                          
                    tr.appendChild( td );                         
                    table_class.table_block.querySelector( 'table' ).appendChild( tr );
                } else {                    
                    table_class.table_block.querySelector( 'table>tr' ).appendChild( td );
                }
            } else {
                var tr = document.createElement( 'tr' ); 
                for ( var i =  table_class.leafs.length - 1; i >= 0; i-- ) {
                    var td = document.createElement( 'td' );
                    
                    if ( !in_array( SPECIFIER.PROXY, table_class.leafs[i].specifiers ) ) {
                        table_class.leafs[i].specifiers.push( SPECIFIER.PROXY );
                    }
                    
                    td.appendChild( table_class.leafs[i].getEditInterface() );  
                    
                    if ( table_class.type == INTERFACE_SPECIFIER.ROW ) {
                        tr.appendChild( td );
                    } else {
                        table_class.table_block.querySelector( 'table' ).children[i].appendChild( td );
                    }
                }
                if ( table_class.type == INTERFACE_SPECIFIER.ROW ) {
                    table_class.table_block.querySelector( 'table' ).appendChild( tr );
                }
            }
            
            update_buttons( table_class );
        });
        
        return btn;
    }

    function get_delete_button( table_class ) { 
        var btn = new Button( "-", function() { 
            table_class.elements_count--;
            
            if ( table_class.type == INTERFACE_SPECIFIER.ROW ) {
                table_class.table_block.querySelector( 'table' ).lastChild.remove();
            } else {
                for ( var i = 0; i < table_class.table_block.querySelector( 'table' ).children.length; i++ ) {
                    table_class.table_block.querySelector( 'table' ).children[i].lastChild.remove();
                }
            }
            
            update_buttons( table_class );
        });
        
        return btn;
    }
    
    function update_buttons( table_class ) {
        table_class.delete_btn.disabled = !( table_class.elements_count > table_class.min_elements );
        table_class.add_btn.disabled = !( table_class.elements_count < table_class.max_elements );
    }

    function form_table( matrix ) {
        var table = document.createElement( 'table' );
        
        for ( var i = 0; i < matrix.length; i++ ) {
            var tr = document.createElement( 'tr' ); 
            
            for ( var j = 0; j < matrix[i].length; j++ ) {
                var th = document.createElement( 'th' );
                th.colSpan = matrix[i][j].colSpan;  
                th.rowSpan = matrix[i][j].rowSpan;   
                th.textContent = matrix[i][j].textContent;
                tr.appendChild( th );
            }
            
            table.appendChild( tr );
        }
        
        return table;
    }

    function get_matrix( type, width, height, traversal ) {
        var traversal = clone( traversal );        
        
        return ( ( type == INTERFACE_SPECIFIER.COLUMN ) 
            ? get_vertical_matrix( width, height, traversal ) 
            : get_horizontal_matrix( width, height, traversal ) );            
    }
    
    function get_vertical_matrix( width, height, traversal ) {
        var matrix = [],
              current;        
              
        for ( var i = 0; i < width; i++ ) {
            matrix[i] = [];
        }
        
        var row_height = 0,
              current_row = 0;
              
        if ( in_array( SPECIFIER.PROXY, traversal[0].specifiers ) ) {
            traversal.shift();
            row_height = 1;
        }
        
        while ( current = traversal.shift() ) { 
        
            var height_inc = ( isHeaderVertex( current ) ? 1 : ( height - current.level ) );
                
            if ( row_height >= height ) {
                row_height = current.level;
                current_row++;
            }
            
            matrix[current_row].push({
                rowSpan : current.width,
                colSpan : height_inc,
                textContent : ( ( in_array( SPECIFIER.PROXY, current.specifiers ) ) ? "" : current.name )            
            });
            
            row_height = row_height + height_inc;
        }            
        
        return matrix;
    }

    function get_horizontal_matrix( width, height, traversal ) {
        var matrix = [], 
              current;        
              
        for ( var i = 0; i <= height; i++ ) {
            matrix[i] = [];
        }
        
        if ( in_array( SPECIFIER.PROXY, traversal[0].specifiers ) ) {
            traversal.shift();
        }
        
        while ( current = traversal.pop() ) {
            matrix[current.level].push({
                rowSpan : ( isHeaderVertex( current ) ? 1 : ( height - current.level ) ),
                colSpan : current.width,
                textContent : ( ( in_array( SPECIFIER.PROXY, current.specifiers ) ) ? "" : current.name )
            });
        }        
        
        return matrix;
    }

    function get_leafs( traversal ) {
        var leafs = clone( traversal );
        
        for ( var i = leafs.length - 1; i >= 0; i-- ) {
            if ( isHeaderVertex( leafs[i] ) ) {
                leafs.splice( i, 1 );
            }  
        }
        
        return leafs;
    }
    
    function get_first_traversal( element_metainf ) {
        var traversal = [],
              queue = [];
              
        queue.push( element_metainf );
          
        while ( queue.length ) {
            
            var current = queue.pop();
            
            if ( !in_array( current, traversal ) ) {        
                traversal.push( current );
                if ( isHeaderVertex( current ) ) {       
                    for ( var i = 0; i < current.children.length; i++ ) {
                       queue.push( current.children[i] );
                    }
                }
            }
        }
        
        return traversal;
    }
    
    function get_height( vertex, level ) {        
        var height = 1;
        level = level || 1;   
        
        if ( isHeaderVertex( vertex ) ) {
            
            vertex.children.forEach( function( child ) {   
                child.height = get_height( child, level + 1 );
                child.level = level;
                height =  Math.max( height, child.height + 1 );
            });
        }
        
        return height;
    }
    
    function get_width( vertex ) {
        var width = 0;
        
        if ( ( isHeaderVertex( vertex ) ) 
            && vertex.children.length ) {    
            
            vertex.children.forEach( function( child ) {
                child.width = get_width( child );
                width = width + child.width;
            });
        } else {
            width = 1;
        }
                    
        return width;
    }
    
    function isHeaderVertex( vertex ) {
        return in_array( vertex.interface_specifier, [INTERFACE_SPECIFIER.UNDEFINED, INTERFACE_SPECIFIER.COMPLEX, INTERFACE_SPECIFIER.ROW, INTERFACE_SPECIFIER.COLUMN] );
    }
       
};function Set( root ) {
    
    if ( root.interface_specifier != INTERFACE_SPECIFIER.SET ) return;
    
    var root = clone( root );
    
    this.title = ( !in_array( SPECIFIER.PROXY, root.specifiers ) ? root.name : null );
    this.element_metainf = root;
    
    this.min_elements;
    this.max_elements;
    
    if ( in_array( SPECIFIER.ONE, this.element_metainf.specifiers ) || in_array( SPECIFIER.COPY, this.element_metainf.specifiers ) ) {
        this.min_elements = 1;
        this.max_elements = 1;
    } else if ( in_array( SPECIFIER.ONEMM, this.element_metainf.specifiers ) || in_array( SPECIFIER.COPYMM, this.element_metainf.specifiers ) ) {
        this.min_elements = 0;
        this.max_elements = 1;
    } else if ( in_array( SPECIFIER.SET, this.element_metainf.specifiers ) ) {
        this.min_elements = 1;
        this.max_elements = 100000;
    } else if ( in_array( SPECIFIER.SETMM, this.element_metainf.specifiers ) ) {
        this.min_elements = 0;
        this.max_elements = 100000;
    }
    
    this.elements_count = 0;
    
    this.set_block;
    this.add_btn;
    this.delete_btn;
    
    this.getEditInterface = function() {
        this.set_block = get_set_block( this.element_metainf, this.title );
        
        this.add_btn = get_add_button( this );      
        this.delete_btn = get_delete_button( this ); 
        
        var control_block = document.createElement( 'div' );
        $(control_block).addClass("control_block");
        control_block.appendChild( this.add_btn );    
        control_block.appendChild( this.delete_btn );    
        this.set_block.appendChild( control_block );
        
        while ( this.elements_count < this.min_elements ) {
            this.add_btn.click();
        }
        
        update_buttons( this );
        
        return this.set_block;
    }
    
    this.getInformation = function( block ) { 
        var list = block.querySelector( 'ul' ),
              set = [];
              
        this.element_metainf.resetSpecifiers();
        this.element_metainf.updateSpecifier();
        this.element_metainf.updateInterfaceSpecifier();
        
        for ( var i = 0; i < list.children.length; i++ ) {
            
            var info = this.element_metainf.getInformation( list.children[i].querySelector( 'div' ) );
            
            if ( !info ) {
                return;
            }
            set.push( info );
        }
        
        return set;
    }
    
    this.putInformation = function( info, block ) {
        var list = block.querySelector( 'ul' ),
              i = 0;
              
        this.element_metainf.resetSpecifiers();
        this.element_metainf.updateSpecifier();
        this.element_metainf.updateInterfaceSpecifier();
        
        if ( list.children.length > 0 ) {
            this.element_metainf.putInformation( info[i], list.lastChild.querySelector( 'div' ) );
            i++;
        }
        
        if ( info ) {
            for ( ; i < info.length; i++ ) {
                block.lastChild.children[0].click();
                this.element_metainf.putInformation( info[i], list.lastChild.querySelector( 'div' ) );
            }     
        }
    }
    
    function get_set_block( element_metainf, title ) {
        var set_block = document.createElement( 'div' ),
              elements = document.createElement( 'ul' );
        $(set_block).addClass("set_block");
        
        if ( title ) {
            var ttl = document.createElement( 'h3' );
            ttl.textContent = title;
            set_block.appendChild( ttl );
            element_metainf.specifiers.push( SPECIFIER.PROXY );
        }
        
        set_block.appendChild( elements );      

        if ( !element_metainf ) return set_block;
        
        element_metainf.resetSpecifiers();
        element_metainf.updateSpecifier();
        element_metainf.updateInterfaceSpecifier();       
        
        return set_block;
    }
    
    function get_add_button( set_class ) { 
        var btn = new Button( "+", function() {
            set_class.elements_count++;
            var element = document.createElement( 'li' );
            element.appendChild( set_class.element_metainf.getEditInterface() );
            set_class.set_block.querySelector( 'ul' ).appendChild( element );
            
            update_buttons( set_class );
        });
        
        return btn;
    }
    
    function get_delete_button( set_class ) { 
        var btn = new Button( "-", function() { 
            set_class.elements_count--;
            set_class.set_block.querySelector( 'ul' ).lastChild.remove();
            
            update_buttons( set_class );
        });
        
        return btn;
    }
    
    function update_buttons( set_class ) {
        set_class.delete_btn.disabled = !( set_class.elements_count > set_class.min_elements );
        set_class.add_btn.disabled = !( set_class.elements_count < set_class.max_elements );
    }
};function CollectionVertex( $block, meta ) {
    var data = $block.data('collection');
    if (data) {
        return data;
    }

    /* init object */
    var self = $.extend($block, {
        meta: meta,
        element_meta: clone( meta ),
        setInfo: setInfo,
        getInfo: getInfo,
        destroy: function() {
            self.html('');
        }
    });

    var defaultConfig = {
        ORIENTATION: COLLECTION_ORIENTATION.HORIZONTAL
    };

    var config = $.extend(defaultConfig, meta.interface_params);

    /* init DOM */
    var _orientation = in_array(config.ORIENTATION, [COLLECTION_ORIENTATION.HORIZONTAL,COLLECTION_ORIENTATION.VERTICAL]) ?  config.ORIENTATION : COLLECTION_ORIENTATION.HORIZONTAL;
    var _type = intersect( self.meta.specifiers, [ SPECIFIER.SET, SPECIFIER.SETMM ] ).length > 0
        ? COLLECTION_TYPE.SET
        : COLLECTION_TYPE.LIST;

    self.element_meta.simplifyCollection();

    var _traversal = get_first_traversal( self.element_meta );
    var _leafs = get_leafs( _traversal );

    var _width = get_width( self.element_meta );
    var _height = get_height( self.element_meta );

    self.element_meta.level = 0;
    self.element_meta.width = _width;
    self.element_meta.height = _height;


    if ( intersect( self.meta.specifiers, [ SPECIFIER.ONE, SPECIFIER.COPY ] ).length > 0 ) {
        self.min_elements = 1;
        self.max_elements = 1;
    } else if ( intersect( self.meta.specifiers, [ SPECIFIER.ONEMM, SPECIFIER.COPYMM ] ).length > 0 ) {
        self.min_elements = 0;
        self.max_elements = 1;
    } else if ( intersect( self.meta.specifiers, [ SPECIFIER.SET, SPECIFIER.LIST ] ).length > 0 ) {
        self.min_elements = 1;
        self.max_elements = 100000;
    } else if ( intersect( self.meta.specifiers, [ SPECIFIER.SETMM, SPECIFIER.LISTMM ] ).length > 0 ) {
        self.min_elements = 0;
        self.max_elements = 100000;
    }

    self.elements_count = 0;

    var matrix = get_matrix( _orientation, _width, _height, _traversal );

    var form = get_collection_block( matrix );

    $( form ).children().appendTo( self );
    self.addClass("collection_block")
        .addClass( _orientation == COLLECTION_ORIENTATION.HORIZONTAL ? "collection_horizontal" : "collection_vertical" )
        .data('collection', self);

    while ( self.elements_count < self.min_elements ) {
        add_element();
    }

    update_buttons();

    return self;

    function getInfo() {
        var list = self.find( '>table' ),
            collection = new Vertex( self.element_meta.name, [], "", null ),
            size = get_size_from_blocks( _orientation, _height, list );

        for ( var i = 0; i < size ; i++ ) {
            var leafs_blocks = get_leafs_blocks(list, size, i);

            var info = merge_leafs_val_with_meta( leafs_blocks, self.element_meta );

            collection.children.push( info );
        }

        return collection.children;
    }

    function setInfo( info ) {
        var elementsOfSet = [],
            list = self.find( '>table' ),
            size = get_size_from_blocks( _orientation, _height, list );

        if (info instanceof Vertex) {
            info = [info];
        }

        var k = 0;
        while ( info[k] && self.element_meta.name == info[k].name ) {
            elementsOfSet.push( info[k] );
            k++;
        }

        while ( size < elementsOfSet.length ) {
            add_element();
            size++;
        }

        for ( var i = 0; i < size ; i++ ) {
            var leafs_blocks = get_leafs_blocks(list, size, i);

            put_info_leafs_vals( elementsOfSet[i], leafs_blocks, self.element_meta );
        }

        return self;
    }

    function get_collection_block( matrix ) {
        var table_block = document.createElement( 'div' );

        table_block.appendChild( form_table( matrix ) );

        var add_btn = generate_add_button();

        /* append HORIZONTAL CONTROL HEADINGS for HORIZONTAL orientation */
        if (_orientation == COLLECTION_ORIENTATION.HORIZONTAL) {
            if ( _type == COLLECTION_TYPE.SET ) {
                $( document.createElement( 'th' ) )
                    .attr( 'rowSpan', _height )
                    .insertBefore( $( table_block ).find( '>table>tr:first-child>*:first-child' ) );
            }

            $( document.createElement( 'th' ) )
                .attr( 'rowSpan', _height )
                .insertAfter( $( table_block ).find( '>table>tr:first-child>*:last-child' ) );

        /* append VERTICAL CONTROL HEADINGS for VERTICAL orientation */
        } else {
            var tr_name = document.createElement( 'tr' );
            var th_name = document.createElement( 'th' );
            tr_name.appendChild(th_name);

            var tr_control = document.createElement( 'tr' );
            var th_control = document.createElement( 'th' );
            tr_control.appendChild(th_control);

            if ( _type == COLLECTION_TYPE.SET ) {
                $( th_name )
                    .attr( 'colSpan', _width );
                $( tr_name )
                    .attr( 'colSpan', _width )
                    .insertBefore( $( table_block ).find( '>table>tr:first-child' ) );
            }

            $( th_control )
                .attr( 'colSpan', _width );
            $( tr_control )
                .insertAfter( $( table_block ).find( '>table>tr:last-child' ) );
        }

        /* append ADD button for HORIZONTAL orientation */
        var tr, head_part;

        if (_orientation == COLLECTION_ORIENTATION.HORIZONTAL) {
            tr = table_block.querySelector('table>tr:last-child');
            head_part = document.createElement( 'td' );
            $( head_part ).attr( 'colSpan', '100%' );

            /* append ADD button for VERTICAL orientation */
        } else {
            tr = table_block.querySelector('table>tr:first-child');
            head_part = document.createElement( 'th' );
            $( head_part ).attr( 'rowSpan', _height + 1 + ( _type == COLLECTION_TYPE.SET ? 1 : 0 ) );
        }

        tr.appendChild( head_part );
        head_part.appendChild( add_btn );

        return table_block;
    }

    function get_leafs_blocks(list, size, i) {
        var leafs_blocks = [],
            list_children, j;

        if ( _orientation == COLLECTION_ORIENTATION.HORIZONTAL ) {
            list_children = list.find('>tr:nth-child(' + (i + _height + 1) + ')>*');

            for ( j = _type == COLLECTION_TYPE.SET ? 1 : 0; j < list_children.length - 1; j++ ) {
                leafs_blocks.push( list_children.eq(j).find('>div') );
            }
        } else {
            for ( j = _width + (_type == COLLECTION_TYPE.SET ? 0 : -1); j >= (_type == COLLECTION_TYPE.SET ? 1 : 0); j-- ) {
                list_children = list.find('>tr').eq(j).children();
                leafs_blocks.push( list_children.eq(list_children.length - size + i - ( j === 0 ? 1 : 0) ).find( 'div' ) );
            }
        }

        return leafs_blocks;
    }

    function get_size_from_blocks( type, height, table ) {
        var size = 0;

        if ( type == COLLECTION_ORIENTATION.HORIZONTAL ) {
            size = table.children().length - height - 1;
        } else {
            var table_children = table.find( '>tr:first-child>*' );
            for ( var j = 0; j < table_children.length; j++ ) {
                if ( !table_children.eq(j).is('th') ) {
                    size++;
                }
            }
        }

        return size;
    }

    /** TODO: refactor */
    function put_info_leafs_vals( info, leafs_blocks, element_metainf ) {
        var traversal_meta = [],
            queue_meta = [],
            traversal_info = [],
            queue_info = [];

        queue_meta.push( clone(element_metainf) );
        queue_info.push( clone(info) );

        while ( queue_meta.length ) {

            var current_meta = queue_meta.pop(),
                current_info = queue_info.pop();

            if (current_info instanceof Vertex) {
                sortArrayByMeta( current_info.children, current_meta.children);
            }

            traversal_meta.push( current_meta );

            if ( isHeaderVertex( current_meta ) ) {
                var k = 0;

                for ( var i = 0; i < current_meta.children.length; i++ ) {
                    queue_meta.push( current_meta.children[i] );

                    if ( current_meta.children[i].interface_specifier == INTERFACE_SPECIFIER.COLLECTION ) {
                        var elementsofset = [];
                        while ( current_info.children[i + k] && current_meta.children[i].name == current_info.children[i + k].name ) {
                            elementsofset.push( current_info.children[i + k] );
                            k++;
                        }
                        k--;
                        queue_info.push( elementsofset );
                    } else {
                        queue_info.push( current_info.children[i+k] );
                    }
                }
            } else {
                traversal_info.push( current_info );
            }
        }

        for ( var i = traversal_meta.length - 1; i >= 0; i-- ) {
            if ( isHeaderVertex( traversal_meta[i] ) ) {
                traversal_meta.splice( i, 1 );
            }
        }

        if ( traversal_meta.length === 0 ) {
            traversal_meta.push( element_metainf );
            traversal_info.push( info );
        }

        /** TODO: FUCKING MAGIC OR SOME ITERATIONS */

        for ( var i = 0; i < traversal_meta.length; i++ ) {
            AbstractVertex( $( leafs_blocks.pop() ), traversal_meta[i] ).setInfo( traversal_info[i] );
        }
    }

    function merge_leafs_val_with_meta( leafs_vals, element_metainf ) {
        var vertex = clone( element_metainf ),
            queue = [],
            current, i;

        queue.push( vertex );

        while ( queue.length ) {
            current = queue.pop();

            if ( !isHeaderVertex( current ) ) {
                var info = AbstractVertex( $( leafs_vals.pop() ), current ).getInfo();

                if ( info ) {
                    if ( info.length >= 0 ) {
                        var index = 0,
                            parent = current.parent;

                        while( parent.children[index].name != current.name ) {
                            index++;
                        }

                        if (info.length === 0) {
                            parent.children.splice(index, 1);
                        } else {
                            parent.children[index] = info[0];
                            index++;
                        }


                        for (i = 1; i < info.length; i++) {
                            parent.children.splice(index, 0, info[i]);
                            index++;
                        }
                    } else {
                        current.sort = info.sort;
                        current.children = info.children;
                    }
                }
            } else {
                for ( i = 0; i < current.children.length; i++ ) {
                    current.children[i].parent = current;
                    queue.push( current.children[i] );
                }
            }
        }

        return vertex;
    }
    /** TODO: refactor */
    function add_element() {
        self.elements_count++;

        if ( self.element_meta.sort ) {
            var td = document.createElement( 'td' ),
                block = document.createElement( 'div' );

            if ( !in_array( SPECIFIER.PROXY, _leafs[0].specifiers ) ) {
                _leafs[0].specifiers.push( SPECIFIER.PROXY );
            }

            $( td ).append( AbstractVertex( $( block ), _leafs[0] ) );

            if ( _orientation == COLLECTION_ORIENTATION.HORIZONTAL ) {
                var tr = document.createElement( 'tr' );
                tr.appendChild( td );

                $( tr ).insertBefore( self.find( '>table>tr:last-child' ) );
                append_horizontal_controls();
            } else {
                append_vertical_controls();

                if ( _type == COLLECTION_TYPE.SET ) {
                    $( td ).insertAfter( self.find( '>table>tr:nth-child(2)>*:last-child' ) );
                } else {
                    $( td ).insertBefore( self.find( '>table>tr:first-child>*:last-child' ) );
                }
            }
        } else {
            var tr = document.createElement( 'tr' );

            for ( var i =  _leafs.length - 1; i >= 0; i-- ) {
                var td = document.createElement( 'td' ),
                    block = document.createElement( 'div' );

                if ( !in_array( SPECIFIER.PROXY, _leafs[i].specifiers ) ) {
                    _leafs[i].specifiers.push( SPECIFIER.PROXY );
                }

                $( td ).append( AbstractVertex( $( block ), _leafs[i] ) );

                if ( _orientation == COLLECTION_ORIENTATION.HORIZONTAL ) {
                    tr.appendChild( td );
                } else {
                    if ( i == 0 ) {
                        if ( _type == COLLECTION_TYPE.SET ) {
                            $( td ).insertAfter( self.find( '>table>tr:nth-child(2)>*:last-child' ) );
                        } else {
                            $( td ).insertBefore( self.find( '>table>tr:first-child>*:last-child' ) );
                        }
                    } else {
                        self.find( '>table' ).children().eq(i + ( _type == COLLECTION_TYPE.SET ? 1 : 0)).append( td );
                    }
                }
            }

            if ( _orientation == COLLECTION_ORIENTATION.HORIZONTAL ) {
                $( tr ).insertBefore( self.find( '>table>tr:last-child' ) );
                append_horizontal_controls();
            } else {
                append_vertical_controls();
            }
        }

        update_buttons();
    }

    function remove_horizontal_element($tr) {
        return function() {
            self.elements_count--;
            update_buttons();
            $tr.remove();
        }
    }

    function remove_vertical_element() {
        var $td = $( this ).parent();
        var i = -1;

        while ($td.next().length > 0) {
            $td = $td.next();
            i--;
        }

        var rows = self.find('>table>tr');

        for (var j = 0; j < rows.length; j++) {
            rows.eq(j).children().eq(i - ( j === 0 ? 1 : 0)).remove();
        }

        self.elements_count--;
        update_buttons();
    }

    function generate_add_button() {
        var add_btn = document.createElement( 'button' );
        add_btn.textContent = '+ Добавить';
        add_btn.onclick = add_element;
        $( add_btn ).addClass('add');

        return add_btn;
    }

    function create_remove_button() {
        var remove_btn = document.createElement('button');
        remove_btn.textContent = '- Удалить';
        $(remove_btn).addClass('remove');

        return remove_btn;
    }

    function append_horizontal_controls() {
        if ( _orientation == COLLECTION_ORIENTATION.HORIZONTAL ) {
            var remove_btn_block = document.createElement('td');
            var remove_btn = create_remove_button();
            remove_btn_block.appendChild(remove_btn);

            var $tr = self.find('>table>tr:last-child').prev();

            if (_type === COLLECTION_TYPE.SET) {
                $( document.createElement('td') )
                    .insertBefore($tr.find('>*:first-child'));
            }

            remove_btn.onclick = remove_horizontal_element($tr);

            $(remove_btn_block)
                .insertAfter($tr.find('>*:last-child'));
        }
    }

    function append_vertical_controls() {
        if ( _type === COLLECTION_TYPE.SET ) {
            $( document.createElement('td') )
                .insertBefore( self.find( '>table>tr:first-child>*:last-child' ) );
        }

        var remove_btn_block = document.createElement('td');
        var remove_btn = create_remove_button();
        remove_btn_block.appendChild(remove_btn);

        remove_btn.onclick = remove_vertical_element;

        $( remove_btn_block )
            .insertAfter( self.find( '>table>tr:last-child>*:last-child' ) );
    }

    function update_buttons() {
        getAddButton().attr( 'disabled', !( self.elements_count < self.max_elements ) );
        getRemoveButtons().attr( 'disabled', !( self.elements_count > self.min_elements ) );
    }

    function getAddButton() {
        return self.find( '>table>tr>*>.add' );
    }

    function getRemoveButtons() {
        return self.find( '>table>tr>*>.remove' );
    }

    function form_table( matrix ) {
        var table = document.createElement( 'table' );

        for ( var i = 0; i < matrix.length; i++ ) {
            var tr = document.createElement( 'tr' );

            for ( var j = 0; j < matrix[i].length; j++ ) {
                var th = document.createElement( 'th' );
                th.colSpan = matrix[i][j].colSpan;
                th.rowSpan = matrix[i][j].rowSpan;
                th.textContent = matrix[i][j].textContent;
                tr.appendChild( th );
            }

            table.appendChild( tr );
        }

        return table;
    }

    function get_matrix( type, width, height, traversal ) {
        traversal = clone( traversal );

        return ( ( type == COLLECTION_ORIENTATION.VERTICAL )
            ? get_vertical_matrix( width, height, traversal )
            : get_horizontal_matrix( width, height, traversal ) );
    }

    function get_vertical_matrix( width, height, traversal ) {
        var matrix = [],
            current;

        for ( var i = 0; i < width; i++ ) {
            matrix[i] = [];
        }

        var row_height = 0,
            current_row = 0;

        if ( in_array( SPECIFIER.PROXY, traversal[0].specifiers ) ) {
            traversal.shift();
            row_height = 1;
        }

        while ( current = traversal.shift() ) {

            var height_inc = ( isHeaderVertex( current ) ? 1 : ( height - current.level ) );

            if ( row_height >= height ) {
                row_height = current.level;
                current_row++;
            }

            matrix[current_row].push({
                rowSpan : current.width,
                colSpan : height_inc,
                textContent : ( ( in_array( SPECIFIER.PROXY, current.specifiers ) ) ? "" : current.name )
            });

            row_height = row_height + height_inc;
        }

        return matrix;
    }

    function get_horizontal_matrix( width, height, traversal ) {
        var matrix = [],
            current;

        for ( var i = 0; i <= height; i++ ) {
            matrix[i] = [];
        }

        if ( in_array( SPECIFIER.PROXY, traversal[0].specifiers ) ) {
            traversal.shift();
        }

        while ( current = traversal.pop() ) {
            matrix[current.level].push({
                rowSpan : ( isHeaderVertex( current ) ? 1 : ( height - current.level ) ),
                colSpan : current.width,
                textContent : ( ( in_array( SPECIFIER.PROXY, current.specifiers ) ) ? "" : current.name )
            });
        }

        return matrix;
    }

    function get_leafs( traversal ) {
        var leafs = [];

        /* for simple vertex */
        if (traversal.length === 1) {
            return [traversal[0]];
        }

        /* for complex vertex */
        for ( var i = 0; i < traversal.length; i++ ) {
            if ( !isHeaderVertex( traversal[i] ) ) {
                leafs.push(traversal[i]);
            }
        }

        return leafs;
    }

    function get_first_traversal( element_metainf ) {
        var traversal = [],
            queue = [];

        queue.push( element_metainf );

        while ( queue.length ) {

            var current = queue.pop();

            if ( !in_array( current, traversal ) ) {
                traversal.push( current );
                if ( isHeaderVertex( current ) ) {
                    for ( var i = 0; i < current.children.length; i++ ) {
                        queue.push( current.children[i] );
                    }
                }
            }
        }

        return traversal;
    }

    function get_height( vertex, level ) {
        var height = 1;
        level = level || 1;

        if ( isHeaderVertex( vertex ) ) {
            vertex.children.forEach( function( child ) {
                child.height = get_height( child, level + 1 );
                child.level = level;
                height =  Math.max( height, child.height + 1 );
            });
        }

        return height;
    }

    function get_width( vertex ) {
        var width = 0;

        if ( isHeaderVertex( vertex ) && vertex.children.length ) {
            vertex.children.forEach( function( child ) {
                child.width = get_width( child );
                width = width + child.width;
            });
        } else {
            width = 1;
        }

        return width;
    }

    function isHeaderVertex( vertex ) {
        return in_array( vertex.interface_specifier, [INTERFACE_SPECIFIER.UNDEFINED, INTERFACE_SPECIFIER.COMPLEX] );
    }
};function ComplexVertex( $block, meta ) {
    var data = $block.data('complex');
    if (data) {
        return data;
    }

    /* init object */
    var self = $.extend($block, {
        meta: meta,
        setInfo: setInfo,
        getInfo: getInfo,
        destroy: function() {
            self.html('');
        }
    });

    /* init DOM */
    var label = ( !in_array( SPECIFIER.PROXY, meta.specifiers ) ? meta.name : null );
    var form = get_complex_block( meta, label );

    $( form ).children().appendTo( self );
    self.addClass("complex_block")
        .data('complex', self);

    return self;

    function getInfo() {
        var title_shift = ( self.children()[0].nodeName == "H2" ? 1 : 0),
            vertex = new Vertex( self.meta.name, self.meta.specifiers, self.meta.interface_specifier, self.meta.sort );

        for ( var i = 0; i < self.meta.children.length; i++ ) {
            var info = AbstractVertex( $( self.children().get(i + title_shift) ), self.meta.children[i] ).getInfo();

            if ( !info ) {
                return;
            } else if ( info.length ) {
                for ( var j = 0; j < info.length; j++ ) {
                    vertex.children.push( info[j] );
                }
            } else {
                vertex.children.push( info );
            }
        }

        return vertex;
    }

    function setInfo( info ) {
        var title_shift = self.children().eq(0).is('h2') ? 1 : 0,
            k = 0,
            elem;

        if (info instanceof Vertex) {
            sortArrayByMeta( info.children, self.meta.children);
        }


        for ( var i = 0; i < self.meta.children.length; i++ ) {

            if ( self.meta.children[i].interface_specifier == INTERFACE_SPECIFIER.COLLECTION ) {
                var elementsOfSet = [];
                while ( info.children[i + k] && self.meta.children[i].name == info.children[i + k].name ) {
                    elementsOfSet.push( info.children[i + k] );
                    k++;
                }
                k--;

                elem = elementsOfSet;
            } else {
                elem = info.children[i + k];
            }

            AbstractVertex( $( self.children().get(i + title_shift) ), self.meta.children[i] ).setInfo( elem );
        }

        return self;
    }

    function get_complex_block( element_metainf, title ) {
        var complex_block = document.createElement( 'div' );

        if ( title ) {
            var ttl = document.createElement( 'h2' );
            ttl.textContent = title;
            complex_block.appendChild( ttl );
        }

        for ( var i = 0; i < element_metainf.children.length; i++ ) {
            var element = document.createElement( 'div' );

            AbstractVertex( $(element), element_metainf.children[i]);

            complex_block.appendChild( element );
        }

        return complex_block;
    }
};function AltVertex( $block, meta ) {
    var data = $block.data('alt');
    if (data) {
        return data;
    }

    /* init object */
    var self = $.extend($block, {
        meta: meta,
        setInfo: setInfo,
        getInfo: getInfo,
        destroy: function() {
            self.html('');
        }
    });

    /* init DOM */
    var label = ( !in_array( SPECIFIER.PROXY, meta.specifiers ) ? meta.name : null );
    var form = get_alt_block( meta, label );

    $( form ).children().appendTo( self );
    self.addClass("alt_block")
        .data('alt', self);

    return self;

    function getInfo() {
        var list = self.find( 'select' );
        var vertex = new Vertex( self.meta.name, self.meta.specifiers, self.meta.interface_specifier, null);
        var meta = self.meta.children[list.val()];
        var info = meta.interface_specifier == INTERFACE_SPECIFIER.TERMINAL_VALUE
            ? meta
            : AbstractVertex( $( self.find( 'div' ) ), meta ).getInfo()
        ;

        vertex.children.push( info );

        return vertex;
    }

    function setInfo( info ) {
        var list = self.find( 'select' );

        for ( var i = 0; i < list.length; i++ ) {
            if ( ( info.children[0].name != "" && self.meta.children[i].name == info.children[0].name )
                || ( info.children[0].name == "" && self.meta.children[i].sort == info.children[0].sort )
            ) {

                list[i].selected = true;
                $( list ).trigger( 'change' );

                /** TODO: setmm?, listmm? */
                if ( self.meta.children[i].interface_specifier == INTERFACE_SPECIFIER.COLLECTION ) {
                    AbstractVertex( $( self.find( 'div' ) ), self.meta.children[i] ).setInfo( info.children );
                } else {
                    AbstractVertex( $( self.find( 'div' ) ), self.meta.children[i] ).setInfo( info.children[0] );
                }
                break;
            }
        }

        return self;
    }

    function get_alt_block( element_metainf, title ) {
        var alt_block = document.createElement( 'div' ),
            select = document.createElement( 'select' );

        if ( title ) {
            var ttl = document.createElement( 'h1' );
            ttl.textContent = title;
            alt_block.appendChild( ttl );
        }

        for ( var i = 0; i < element_metainf.children.length; i++ ) {
            var option = document.createElement( 'option' );
            if ( element_metainf.children[i].sort ) {
                if ( element_metainf.children[i].sort.match( TERMINAL.SORT.REGULAR_EXPR ) ) {
                    option.text = element_metainf.children[i].name;
                } else {
                    option.text = element_metainf.children[i].sort.match( TERMINAL.VALUE.REGULAR_EXPR )[0];
                }
            } else {
                option.text = element_metainf.children[i].name;
            }
            option.value = i;
            option.name = element_metainf.children[i].name;
            select.add( option );
        }

        alt_block.appendChild( select );
        if ( !element_metainf.children[select.value].sort || element_metainf.children[select.value].sort.match( TERMINAL.SORT.REGULAR_EXPR ) ) {
            var elem = document.createElement( 'div' );
            AbstractVertex( $( elem ), element_metainf.children[select.value] );

            alt_block.appendChild( elem );
        }

        select.onchange = function() {
            if ( self.find( 'div' ) ) {
                self.find( 'div' ).remove();
            }

            if ( !element_metainf.children[select.value].sort || element_metainf.children[select.value].sort.match( TERMINAL.SORT.REGULAR_EXPR ) ) {
                var elem = document.createElement( 'div' );
                AbstractVertex( $( elem ), element_metainf.children[select.value] );

                self.append( elem );
            }
        };

        return alt_block;
    }
};function BooleanVertex( $block, meta ) {
    var data = $block.data('boolean');
    if (data) {
        return data;
    }

    /* init object */
    var self = $.extend($block, {
        meta: meta,
        setInfo: setInfo,
        getInfo: getInfo,
        destroy: function() {
            self.html('');
        }
    });

    /* init DOM */
    var label = ( !in_array( SPECIFIER.PROXY, meta.specifiers ) ? meta.name : null );
    var form = get_boolean_block( meta, label );

    $( form ).children().appendTo( self );
    self.addClass("boolean_block")
        .data('boolean', self);

    return self;

    function getInfo() {
        var value = TO.BOOL( self.find( 'input' ).is(":checked") );

        if ( !value.match( TERMINAL.VALUE.BOOL ) ) {
            self.addClass("error");
            return;
        }
        self.removeClass("error");

        return new Vertex( self.meta.name, self.meta.specifiers, self.meta.interface_specifier, value );
    }

    function setInfo( info ) {
        var value = FROM.BOOL( info.sort ) == 'true';
        self.find( 'input' ).attr('checked', !!value );

        return self;
    }

    function get_boolean_block( element_metainf, title ) {
        var boolean_block = document.createElement( 'div' ),
            label = document.createElement( 'label' ),
            input = document.createElement( 'input' );

        input.type = "checkbox";

        label.appendChild( input );

        if ( title ) {
            var ttl = document.createElement( 'span' );
            ttl.textContent = title;
            label.appendChild( ttl );
        }

        boolean_block.appendChild( label );

        return boolean_block;
    }
};function DatetimeVertex( $block, meta ) {
    var data = $block.data('datetime');
    if (data) {
        return data;
    }

    /* init object */
    var self = $.extend($block, {
        meta: meta,
        setInfo: setInfo,
        getInfo: getInfo,
        destroy: function() {
            self.html('');
        }
    });

    /* init DOM */
    var label = ( !in_array( SPECIFIER.PROXY, meta.specifiers ) ? meta.name : null );
    var form = get_datetime_block( meta, label );

    $( form ).children().appendTo( $block );
    self.addClass("datetime_block")
        .data('datetime', self);

    return self;

    function getInfo() {
        var value = TO.DATE( self.find( 'input' ).val() );

        if ( !value.match( TERMINAL.VALUE.DATE ) ) {
            self.addClass("error");
            return;
        }
        self.removeClass("error");

        return new Vertex( self.meta.name, self.meta.specifiers, self.meta.interface_specifier, value );
    }

    function setInfo( info ) {
        var value = FROM.DATE( info.sort );
        self.find( 'input' ).val( value ? value : "" );

        return self;
    }

    function get_datetime_block( element_metainf, title ) {
        var datetime_block = document.createElement( 'div' ),
            label = document.createElement( 'label' ),
            input = document.createElement( 'input' );

        input.type = "datetime-local";

        if ( title ) {
            var ttl = document.createElement( 'span' );
            ttl.textContent = title;
            label.appendChild( ttl );
        }
        label.appendChild( input );

        datetime_block.appendChild( label );

        return datetime_block;
    }
};function StringVertex( $block, meta ) {
    var data = $block.data('string');
    if (data) {
        return data;
    }

    /* init object */
    var self = $.extend($block, {
        meta: meta,
        setInfo: setInfo,
        getInfo: getInfo,
        destroy: function() {
            self.html('');
        }
    });

    /* init DOM */
    var label = ( !in_array( SPECIFIER.PROXY, meta.specifiers ) ? meta.name : null );
    var form = get_string_block( meta, label );

    $( form ).children().appendTo( self );
    self.addClass("string_block")
        .data('string', self);

    return self;

    function getInfo() {
        var value = TO.STR( self.find( 'input' ).val() );

        if ( !value.match( TERMINAL.VALUE.STR ) ) {
            self.addClass("error");
            return;
        }
        self.removeClass("error");

        return new Vertex( self.meta.name, self.meta.specifiers, self.meta.interface_specifier, value );
    }

    function setInfo( info ) {
        var value = FROM.STR( info.sort );
        self.find( 'input' ).val( value ? value : "" );

        return self;
    }

    function get_string_block( element_metainf, title ) {
        var string_block = document.createElement( 'div' ),
            label = document.createElement( 'label' ),
            input = document.createElement( 'input' );

        if ( title ) {
            var ttl = document.createElement( 'span' );
            ttl.textContent = title;
            label.appendChild( ttl );
        }

        label.appendChild( input );

        string_block.appendChild( label );

        return string_block;
    }
};function IntegerVertex( $block, meta ) {
    var data = $block.data('integer');
    if (data) {
        return data;
    }

    /* init object */
    var self = $.extend($block, {
        meta: meta,
        setInfo: setInfo,
        getInfo: getInfo,
        destroy: function() {
            self.html('');
        }
    });

    /* init DOM */
    var label = ( !in_array( SPECIFIER.PROXY, meta.specifiers ) ? meta.name : null );
    var form = get_integer_block( meta, label );

    $( form ).children().appendTo( $block );
    self.addClass("integer_block")
        .data('integer', self);

    return self;

    function getInfo() {
        var value = TO.INT( self.find( 'input' ).val() );

        if ( !value.match( TERMINAL.VALUE.INT ) ) {
            self.addClass("error");
            return;
        }
        self.removeClass("error");

        return new Vertex( self.meta.name, self.meta.specifiers, self.meta.interface_specifier, value );
    }

    function setInfo( info ) {
        var value = FROM.INT( info.sort );
        self.find( 'input' ).val( value ? value : "" );

        return self;
    }

    function get_integer_block( element_metainf, title ) {
        var integer_block = document.createElement( 'div' ),
            label = document.createElement( 'label' ),
            input = document.createElement( 'input' );

        if ( title ) {
            var ttl = document.createElement( 'span' );
            ttl.textContent = title;
            label.appendChild( ttl );
        }
        label.appendChild( input );

        integer_block.appendChild( label );

        return integer_block;
    }
};function RealVertex( $block, meta ) {
    var data = $block.data('real');
    if (data) {
        return data;
    }

    /* init object */
    var self = $.extend($block, {
        meta: meta,
        setInfo: setInfo,
        getInfo: getInfo,
        destroy: function() {
            self.html('');
        }
    });

    /* init DOM */
    var label = ( !in_array( SPECIFIER.PROXY, meta.specifiers ) ? meta.name : null );
    var form = get_real_block( meta, label );

    $( form ).children().appendTo( self );
    self.addClass("real_block")
        .data('real', self);

    return self;

    function getInfo() {
        var value = TO.REAL( self.find( 'input' ).val() );

        if ( !value.match( TERMINAL.VALUE.REAL ) ) {
            self.addClass("error");
            return;
        }
        self.removeClass("error");

        return new Vertex( self.meta.name, self.meta.specifiers, self.meta.interface_specifier, value );
    }

    function setInfo( info ) {
        var value = FROM.REAL( info.sort );
        self.find( 'input' ).val( value ? value : "" );

        return self;
    }

    function get_real_block( element_metainf, title ) {
        var real_block = document.createElement( 'div' ),
            label = document.createElement( 'label' ),
            input = document.createElement( 'input' );

        if ( title ) {
            var ttl = document.createElement( 'span' );
            ttl.textContent = title;
            label.appendChild( ttl );
        }
        label.appendChild( input );

        real_block.appendChild( label );

        return real_block;
    }
};function BlobVertex( $block, meta ) {
    var data = $block.data('blob');
    if (data) {
        return data;
    }

    /* init object */
    var self = $.extend($block, {
        meta: meta,
        setInfo: setInfo,
        getInfo: getInfo,
        destroy: function() {
            self.html('');
        }
    });

    /* init DOM */
    var label = ( !in_array( SPECIFIER.PROXY, meta.specifiers ) ? meta.name : null );
    var form = get_blob_block( meta, label );

    $( form ).children().appendTo( self );
    self.addClass("blob_block")
        .data('blob', self);

    return self;

    function getInfo() {
        var value = TO.BLOB( self.find( 'input' ).val() );

        if ( !value.match( TERMINAL.VALUE.BLOB ) ) {
            self.addClass("error");
            return;
        }
        self.removeClass("error");

        return new Vertex( self.meta.name, self.meta.specifiers, self.meta.interface_specifier, value );
    }

    function setInfo( info ) {
        var value = FROM.BLOB( info.sort );
        self.find( 'input' ).val( value ? value : "" );

        return self;
    }

    function get_blob_block( element_metainf, title ) {
        var blob_block = document.createElement( 'div' ),
            label = document.createElement( 'label' ),
            input = document.createElement( 'input' );

        if ( title ) {
            var ttl = document.createElement( 'span' );
            ttl.textContent = title;
            label.appendChild( ttl );
        }
        label.appendChild( input );

        blob_block.appendChild( label );

        return blob_block;
    }
};function TerminalVertex( $block, meta ) {
    var data = $block.data('terminal');
    if (data) {
        return data;
    }

    /* init object */
    var self = $.extend($block, {
        meta: meta,
        setInfo: setInfo,
        getInfo: getInfo,
        destroy: function() {
            self.html('');
        }
    });

    /* init DOM */
    var label = ( !in_array( SPECIFIER.PROXY, meta.specifiers ) ? meta.name : null );
    var form = get_terminal_block( meta, label );

    $( form ).children().appendTo( $block );
    self.addClass("terminal_block")
        .data('terminal', self);

    return self;

    function getInfo() {
        var value = self.meta.sort;

        return new Vertex( self.meta.name, self.meta.specifiers, self.meta.interface_specifier, value );
    }

    function setInfo( info ) {
        var value = info.sort.match( TERMINAL.VALUE.REGULAR_EXPR );
        self.find( 'span' ).text( value ? value[0] : "" );

        return self;
    }

    function get_terminal_block( element_metainf, title ) {
        var terminal_block = document.createElement( 'div' ),
              value_block = document.createElement( 'span' ),
              value = element_metainf.sort.match( TERMINAL.VALUE.REGULAR_EXPR );

        value_block.textContent = ( value ? value[0] : "" );
        
        if ( title ) {
            var ttl = document.createElement( 'label' );
            ttl.textContent = title + " ";
            terminal_block.appendChild( ttl );
        }

        terminal_block.appendChild( value_block );
        
        return terminal_block;
    }
}$.fn.tableRepresentation = function(options) {
    var data = this.data('table-representation');
    if (data) {
        return data;
    }

    var settings = $.extend({
        orientation: 'HORIZONTAL'
    }, options || {});

    var self = $( this );

    var parser = IrParser();
    var meta = parser.toJson( self.data('tpir-meta') );

    meta.transformToCollection( COLLECTION_ORIENTATION[ settings.orientation ] );

    AbstractVertex( self, meta );

    var info;

    if ( info = self.data('tpir-info') ) {
        self.setInfo( parser.toJson( info ) );
    }

    /* INFO DUMP --> */
    var $pre = $('<pre></pre>').insertAfter(self);

    setInterval(function() {
        $pre.text(parser.toIr( self.getInfo() ));
    },5000);
    /* <-- END INFO DUMP */

    self.data('table-representation', self);

    return self;
};})( jQuery );
